// Code generated by protoc-gen-go. DO NOT EDIT.
// source: encoder.proto

/*
Package encoder is a generated protocol buffer package.

It is generated from these files:
	encoder.proto

It has these top-level messages:
	CreateStreamRequest
	CreateStreamResponse
	DeleteStreamRequest
	DeleteStreamResponse
*/
package encoder

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// An enumeration which allows us to express whether the device will be
// located indoors or outdoors when deployed.
type CreateStreamRequest_Disposition int32

const (
	CreateStreamRequest_INDOOR  CreateStreamRequest_Disposition = 0
	CreateStreamRequest_OUTDOOR CreateStreamRequest_Disposition = 1
)

var CreateStreamRequest_Disposition_name = map[int32]string{
	0: "INDOOR",
	1: "OUTDOOR",
}
var CreateStreamRequest_Disposition_value = map[string]int32{
	"INDOOR":  0,
	"OUTDOOR": 1,
}

func (x CreateStreamRequest_Disposition) String() string {
	return proto.EnumName(CreateStreamRequest_Disposition_name, int32(x))
}
func (CreateStreamRequest_Disposition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

// CreateStreamRequest is the message sent in order to create a new encoded
// stream. All fields are mandatory, and the end result of the call will be a
// configured stream that receives messages, encrypts them and sends them on to
// the configured datastore.
type CreateStreamRequest struct {
	// The address of the MQTT broker to which we should subscribe.
	// This is a required field.
	BrokerAddress string `protobuf:"bytes,1,opt,name=broker_address,json=brokerAddress" json:"broker_address,omitempty"`
	// The topic to which the encoder must subscribe - this will typically just be
	// the device_token sent from the client to start the process.
	// This is a required field.
	DeviceTopic string `protobuf:"bytes,2,opt,name=device_topic,json=deviceTopic" json:"device_topic,omitempty"`
	// The private key for the device which the encoder will use in order to
	// encrypt data for the recipient.
	// This is a required field.
	DevicePrivateKey string `protobuf:"bytes,3,opt,name=device_private_key,json=devicePrivateKey" json:"device_private_key,omitempty"`
	// The public key of the recipient, again this is used in order to encrypt
	// outgoing data, as well as being used to signify to the datastore the bucket
	// in which data should be stored.
	// This is a required field.
	RecipientPublicKey string `protobuf:"bytes,4,opt,name=recipient_public_key,json=recipientPublicKey" json:"recipient_public_key,omitempty"`
	// The identifier of the user for which the stream is being created. This is
	// included as we also need to tell this information to the datastore so that
	// data for this user can be deleted if they so desire.
	// This is a required field.
	UserUid string `protobuf:"bytes,5,opt,name=user_uid,json=userUid" json:"user_uid,omitempty"`
	// The location of the device to be claimed.
	Location *CreateStreamRequest_Location `protobuf:"bytes,6,opt,name=location" json:"location,omitempty"`
	// The specific disposition of the device, i.e. is this instance indoors or
	// outdoors.
	Disposition CreateStreamRequest_Disposition `protobuf:"varint,7,opt,name=disposition,enum=decode.thingful.encoder.CreateStreamRequest_Disposition" json:"disposition,omitempty"`
}

func (m *CreateStreamRequest) Reset()                    { *m = CreateStreamRequest{} }
func (m *CreateStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateStreamRequest) ProtoMessage()               {}
func (*CreateStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateStreamRequest) GetBrokerAddress() string {
	if m != nil {
		return m.BrokerAddress
	}
	return ""
}

func (m *CreateStreamRequest) GetDeviceTopic() string {
	if m != nil {
		return m.DeviceTopic
	}
	return ""
}

func (m *CreateStreamRequest) GetDevicePrivateKey() string {
	if m != nil {
		return m.DevicePrivateKey
	}
	return ""
}

func (m *CreateStreamRequest) GetRecipientPublicKey() string {
	if m != nil {
		return m.RecipientPublicKey
	}
	return ""
}

func (m *CreateStreamRequest) GetUserUid() string {
	if m != nil {
		return m.UserUid
	}
	return ""
}

func (m *CreateStreamRequest) GetLocation() *CreateStreamRequest_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *CreateStreamRequest) GetDisposition() CreateStreamRequest_Disposition {
	if m != nil {
		return m.Disposition
	}
	return CreateStreamRequest_INDOOR
}

// A nested type capturing the location of the device expressed via decimal
// long/lat pair.
type CreateStreamRequest_Location struct {
	// The longitude expressed as a decimal.
	Longitude float64 `protobuf:"fixed64,1,opt,name=longitude" json:"longitude,omitempty"`
	// The latitude expressed as a decimal.
	Latitude float64 `protobuf:"fixed64,2,opt,name=latitude" json:"latitude,omitempty"`
}

func (m *CreateStreamRequest_Location) Reset()                    { *m = CreateStreamRequest_Location{} }
func (m *CreateStreamRequest_Location) String() string            { return proto.CompactTextString(m) }
func (*CreateStreamRequest_Location) ProtoMessage()               {}
func (*CreateStreamRequest_Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *CreateStreamRequest_Location) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *CreateStreamRequest_Location) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

// CreateStreamResponse is the message returned from the stream encoder after it
// successfully creates a stream. The device registration service should keep a
// record of this value so that it is able to delete the stream if required.
type CreateStreamResponse struct {
	// An identifier for the stream which can be used in order to delete a stream
	// when required.
	StreamUid string `protobuf:"bytes,1,opt,name=stream_uid,json=streamUid" json:"stream_uid,omitempty"`
}

func (m *CreateStreamResponse) Reset()                    { *m = CreateStreamResponse{} }
func (m *CreateStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateStreamResponse) ProtoMessage()               {}
func (*CreateStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateStreamResponse) GetStreamUid() string {
	if m != nil {
		return m.StreamUid
	}
	return ""
}

// DeleteStreamRequest is the message sent to the encoder in order to delete a
// configured stream. Sending this message must delete the MQTT subscription, as
// well as deleting all encryption credentials stored on the encoder.
type DeleteStreamRequest struct {
	// The identifier for the stream to be deleted.
	StreamUid string `protobuf:"bytes,1,opt,name=stream_uid,json=streamUid" json:"stream_uid,omitempty"`
}

func (m *DeleteStreamRequest) Reset()                    { *m = DeleteStreamRequest{} }
func (m *DeleteStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteStreamRequest) ProtoMessage()               {}
func (*DeleteStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeleteStreamRequest) GetStreamUid() string {
	if m != nil {
		return m.StreamUid
	}
	return ""
}

// DeleteStreamResponse is a placeholder response message on a successful
// deletion of stream on the encoder.
type DeleteStreamResponse struct {
}

func (m *DeleteStreamResponse) Reset()                    { *m = DeleteStreamResponse{} }
func (m *DeleteStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteStreamResponse) ProtoMessage()               {}
func (*DeleteStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*CreateStreamRequest)(nil), "decode.thingful.encoder.CreateStreamRequest")
	proto.RegisterType((*CreateStreamRequest_Location)(nil), "decode.thingful.encoder.CreateStreamRequest.Location")
	proto.RegisterType((*CreateStreamResponse)(nil), "decode.thingful.encoder.CreateStreamResponse")
	proto.RegisterType((*DeleteStreamRequest)(nil), "decode.thingful.encoder.DeleteStreamRequest")
	proto.RegisterType((*DeleteStreamResponse)(nil), "decode.thingful.encoder.DeleteStreamResponse")
	proto.RegisterEnum("decode.thingful.encoder.CreateStreamRequest_Disposition", CreateStreamRequest_Disposition_name, CreateStreamRequest_Disposition_value)
}

func init() { proto.RegisterFile("encoder.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xc5, 0x2d, 0xc4, 0xf1, 0x38, 0xad, 0xaa, 0x69, 0x04, 0x26, 0x02, 0x29, 0x58, 0x02, 0xe5,
	0x50, 0x2c, 0x14, 0xa8, 0xc4, 0x15, 0x30, 0x07, 0x04, 0x22, 0xc5, 0x34, 0x97, 0x5e, 0x2c, 0xc7,
	0x3b, 0x94, 0x95, 0x8d, 0xd7, 0xec, 0xae, 0x2b, 0xf5, 0x7b, 0xf9, 0x08, 0xae, 0xc8, 0xbb, 0x26,
	0x75, 0x51, 0x28, 0xe4, 0x38, 0xef, 0xbd, 0x99, 0x37, 0xf3, 0xec, 0x85, 0x3d, 0xaa, 0x72, 0xc1,
	0x48, 0x46, 0xb5, 0x14, 0x5a, 0xe0, 0x3d, 0x46, 0x6d, 0x19, 0xe9, 0xaf, 0xbc, 0x3a, 0xff, 0xd2,
	0x94, 0x51, 0x47, 0x87, 0x3f, 0x77, 0xe1, 0xf0, 0x8d, 0xa4, 0x4c, 0xd3, 0x67, 0x2d, 0x29, 0xfb,
	0x96, 0xd0, 0xf7, 0x86, 0x94, 0xc6, 0xc7, 0xb0, 0xbf, 0x92, 0xa2, 0x20, 0x99, 0x66, 0x8c, 0x49,
	0x52, 0x2a, 0x70, 0xa6, 0xce, 0xcc, 0x4b, 0xf6, 0x2c, 0xfa, 0xca, 0x82, 0xf8, 0x08, 0x46, 0x8c,
	0x2e, 0x78, 0x4e, 0xa9, 0x16, 0x35, 0xcf, 0x83, 0x1d, 0x23, 0xf2, 0x2d, 0x76, 0xda, 0x42, 0x78,
	0x04, 0xd8, 0x49, 0x6a, 0xc9, 0x2f, 0x32, 0x4d, 0x69, 0x41, 0x97, 0xc1, 0xae, 0x11, 0x1e, 0x58,
	0xe6, 0xc4, 0x12, 0xef, 0xe9, 0x12, 0x9f, 0xc1, 0x58, 0x52, 0xce, 0x6b, 0x4e, 0x95, 0x4e, 0xeb,
	0x66, 0x55, 0xf2, 0xdc, 0xe8, 0x6f, 0x1b, 0x3d, 0xae, 0xb9, 0x13, 0x43, 0xb5, 0x1d, 0xf7, 0x61,
	0xd8, 0x28, 0x92, 0x69, 0xc3, 0x59, 0x70, 0xc7, 0xa8, 0xdc, 0xb6, 0x5e, 0x72, 0x86, 0x9f, 0x60,
	0x58, 0x8a, 0x3c, 0xd3, 0x5c, 0x54, 0xc1, 0x60, 0xea, 0xcc, 0xfc, 0xf9, 0x71, 0xf4, 0x97, 0x20,
	0xa2, 0x0d, 0x21, 0x44, 0x1f, 0xba, 0xe6, 0x64, 0x3d, 0x06, 0xcf, 0xc0, 0x67, 0x5c, 0xd5, 0x42,
	0x71, 0x33, 0xd5, 0x9d, 0x3a, 0xb3, 0xfd, 0xf9, 0xcb, 0xad, 0xa6, 0xc6, 0x57, 0xfd, 0x49, 0x7f,
	0xd8, 0x24, 0x86, 0xe1, 0x6f, 0x47, 0x7c, 0x00, 0x5e, 0x29, 0xaa, 0x73, 0xae, 0x1b, 0x46, 0x26,
	0x7a, 0x27, 0xb9, 0x02, 0x70, 0x02, 0xc3, 0x32, 0xd3, 0x96, 0xdc, 0x31, 0xe4, 0xba, 0x0e, 0x9f,
	0x80, 0xdf, 0x73, 0x40, 0x80, 0xc1, 0xbb, 0x8f, 0xf1, 0x62, 0x91, 0x1c, 0xdc, 0x42, 0x1f, 0xdc,
	0xc5, 0xf2, 0xd4, 0x14, 0x4e, 0x78, 0x0c, 0xe3, 0xeb, 0xdb, 0xa9, 0x5a, 0x54, 0x8a, 0xf0, 0x21,
	0x80, 0x32, 0x88, 0x49, 0xd4, 0x7e, 0x75, 0xcf, 0x22, 0x4b, 0xce, 0xc2, 0x17, 0x70, 0x18, 0x53,
	0x49, 0x7f, 0xfe, 0x2f, 0xff, 0xe8, 0xba, 0x0b, 0xe3, 0xeb, 0x5d, 0xd6, 0x6c, 0xfe, 0xc3, 0x01,
	0xf7, 0xad, 0xcd, 0x0a, 0x0b, 0x18, 0xf5, 0x17, 0xc2, 0xa3, 0x6d, 0x52, 0x9d, 0x3c, 0xfd, 0x4f,
	0x75, 0x77, 0x65, 0x01, 0xa3, 0xfe, 0x42, 0x37, 0x98, 0x6d, 0xb8, 0xf6, 0x06, 0xb3, 0x4d, 0x57,
	0xbe, 0xf6, 0xce, 0xdc, 0x8e, 0x5f, 0x0d, 0xcc, 0x7b, 0x7c, 0xfe, 0x2b, 0x00, 0x00, 0xff, 0xff,
	0xa6, 0x1c, 0x60, 0xbc, 0xa0, 0x03, 0x00, 0x00,
}
